import funkin.play.PlayState;
import funkin.modding.module.Module;
import funkin.Paths;
import funkin.graphics.FunkinSprite;
import funkin.Conductor;
import funkin.play.components.PopUpStuff;
import flixel.FlxG;
import funkin.Highscore;
import funkin.audio.FunkinSound;
import flixel.text.FlxText;
import flixel.util.FlxSave;
import flixel.tweens.FlxTween;
import flixel.math.FlxMath;

class NoteCombo extends Module {
    var combo = 0;
    var hashitnote = false;
    var notehittime = 0;
    var playedcombo = false;
    var holdnoteend = 0;
    var debugtext:FlxText;
    var save:FlxSave = new FlxSave();
    var coolcombo:FunkinSprite;
    var holdnoteendtime = 0;
    var holdnotestart = 0;
    var comtostring = "";


    function new (){
        super("Note Combo");
        save = new FlxSave();
        save.bind("NoteComboMod", "JugieNoob");
        FlxG.sound.cache(Paths.sound("comboSound"));
    }


    override function onNoteHit(event)
    {
        super.onNoteHit(event);

        if (PlayState.instance != null)
        {
            if (event.note.noteData.getMustHitNote())
            {
                if (Highscore.tallies.combo >= 9 && save.data.combopopup)
                {
                    if (PlayState.instance.comboPopUps.visible)
                    {
                        showcombospr();
                    }

                }

                if (save.data.comboswoosh)
                {
                    //notehittime is now calculated by using steps instead of ms
                    notehittime = event.note.noteData.getStepTime() + (Conductor.instance.get_bpm() / 16);
                    combo++;
                    hashitnote = true;
                    playedcombo = false;
                    checkSustain();
                }

            }

        }



    }
    override function onCountdownStart(event)
    {
        if (save.data.debugtext)
        {
            if (debugtext != null)
            {
                trace(debugtext);
                debugtext.destroy();
                showDebugText();
            }
            else
            {
                showDebugText();
            }

        }

        super.onCountdownStart(event);

        initVariables();
    }

    override function onUpdate(event)
        {
            if (PlayState.instance != null)
            {

                if (save.data.comboswoosh)
                {
                    if (Highscore.tallies.combo == 0)
                    {
                        combo = 0;
                    }
                    if (Conductor.instance.currentStep >= (notehittime + holdnoteend) && hashitnote && !playedcombo)
                    {
                        playedcombo = true;
                        if (!PlayState.instance.isBotPlayMode)
                        {
                            playCoolCombo();
                        }
                    }

                }
            }


            super.onUpdate(event);
        }


    function showcombospr()
    {
        var combospr = new FunkinSprite(100, 100);

        if (PlayState.instance.playerStrumline.noteStyle.id == 'pixel')
            {
                combospr.loadTexture("combo-pixel");
                combospr.scale.set(4, 4);
                combospr.updateHitbox();
                combospr.antialiasing = false;
            }
            else
            {
                combospr.loadTexture("combo");
                combospr.scale.set(0.6, 0.6);
                combospr.updateHitbox();
            }

            combospr.setPosition((FlxG.width * 0.507) + PlayState.instance.comboPopUps.offsets[0] - 60, (FlxG.camera.height * 0.44) + PlayState.instance.comboPopUps.offsets[1]);

        PlayState.instance.comboPopUps.add(combospr);

        //Stuff taken from FNF Source Code
        combospr.scrollFactor.set(0.2, 0.2);
        combospr.zIndex = 1000;
        combospr.acceleration.y = 600;
        combospr.velocity.y -= 150;
        combospr.velocity.x += FlxG.random.int(1, 10);

        combospr.cameras = [PlayState.instance.camHUD];

        FlxTween.tween(combospr, {alpha: 0}, 0.2,
      {
        onComplete: function(tween:FlxTween) {
          combospr.destroy();
        },
        startDelay: Conductor.instance.beatLengthMs * 0.001
      });

    }

    function loadCoolCombo()
    {
        var playerStrumline:FlxSprite = PlayState.instance.playerStrumline;
        coolcombo = new FunkinSprite(30, 300);
        coolcombo.loadSparrow("noteCombo");
        coolcombo.animation.addByPrefix("combo", "NOTE COMBO animation instance", 24, false);
        coolcombo.cameras = [PlayState.instance.camHUD];

        if (playerStrumline.x == (FlxG.width / 2) - (playerStrumline.width / 2))
        {
            coolcombo.setPosition(-235, 325);
        }
        else
        {
            coolcombo.setPosition(30, 300);
        }


        PlayState.instance.add(coolcombo);
        coolcombo.visible = false;
    }

    function playCoolCombo()
    {
        comtostring = Std.string(combo);

        for (i in 0...comtostring.length)
        {
            var coolnumber = new FunkinSprite();
            coolnumber.loadSparrow("noteComboNumbers");
            //No more lag spike (shouldnt have added all the numbers in the loop)
            coolnumber.animation.addByPrefix(comtostring.charAt(i), comtostring.charAt(i), 18, false);
            coolnumber.animation.play(comtostring.charAt(i));
            coolnumber.updateHitbox();
            if (coolcombo != null)
            {
                coolnumber.setPosition(((-50 - (coolnumber.width / 2)) * (comtostring.length - i)) + (coolcombo.x + 568), coolcombo.y + (35 * (comtostring.length - i)) - 44);
            }
            combo = 0;

            coolnumber.cameras = [PlayState.instance.camHUD];

            PlayState.instance.add(coolnumber);

            coolnumber.animation.finishCallback = function(combo)
            {
            	coolnumber.destroy();
            }
        }

        if (coolcombo != null)
        {
            if (save.data.combosound)
            {
                FunkinSound.playOnce(Paths.sound("comboSound"));
            }

            coolcombo.visible = true;
            coolcombo.animation.play("combo");
        }

        coolcombo.animation.finishCallback = function(combo)
		{
			coolcombo.visible = false;
		};

    }

    function showDebugText()
    {
        debugtext = new FlxText();
        debugtext.text = "Combo: " + combo + "\nSong Position: " + Conductor.instance.songPosition + "\nnotehittime: " + notehittime + "\nholdnoteend: " + holdnoteend + "\nholdnoteendtime: " + holdnoteendtime +"\ncurrent step: " + Conductor.instance.currentStep + "\nhashitnote: " + hashitnote;
        debugtext.cameras = [PlayState.instance.camHUD];
        debugtext.size = 18;
        debugtext.updateHitbox();
        debugtext.setPosition(30, FlxG.height - debugtext.height - 10);
        debugtext.zIndex = 1000;
        PlayState.instance.add(debugtext);
    }


    function initVariables()
    {
        if (coolcombo != null)
        {
            coolcombo.destroy();
        }

        if (PlayState.instance.isBotPlayMode)
        {
            return;
        }
        hashitnote = false;
        playedcombo = false;
        holdnotestart = 0;
        holdnoteend = 0;
        holdnoteendtime = 0;
        combo = 0;
        notehittime = 0;
        comtostring = "";



        if (save.data.comboswoosh)
        {
            loadCoolCombo();
        }
    }

    function checkSustain()
    {
        //Rewrote the sutain note stuff
            if (event.note.noteData.getStepLength() > 0 && event.note.noteData.getMustHitNote())
            {
                holdnotestart = event.note.noteData.getStepTime();
                holdnoteend = FlxMath.roundDecimal(event.note.noteData.getStepLength());
                holdnoteendtime = Conductor.instance.currentStep + holdnoteend + 4;
            }
            else
            {
                holdnotestart = 0;
                holdnoteend = 0;
                holdnoteendtime = 0;
            }
    }
}
